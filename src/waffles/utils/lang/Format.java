package waffles.utils.lang;

import waffles.utils.tools.collections.Iterables;

/**
 * A {@code Format} is capable of formatting objects into strings.
 * 
 * @author Waffles
 * @since 26 Jul 2020
 * @version 1.1
 * 
 * 
 * @param <O>  an object type
 */
@FunctionalInterface
public interface Format<O>
{
	/**
	 * Parses an object in the {@code Format}.
	 * 
	 * @param obj  a target object
	 * @return  a parsed string
	 * 
	 * 
	 * @see String
	 */
	public abstract String parse(O obj);
	
	/**
	 * Parses a verbose object in the {@code Format}.
	 * By default, this method simply iterates the same
	 * string as generated by {@code #parse(Object)}, but
	 * this method can be overridden to allow multi-line
	 * parsing of more complex objects.
	 * 
	 * @param obj  a target object
	 * @return  an iterable of parsed strings
	 * 
	 * 
	 * @see Iterable
	 * @see String
	 */
	public default Iterable<String> verbose(O obj)
	{
		return Iterables.singleton(parse(obj));
	}
	
	/**
	 * Casts and parses an object in the {@code Format}.
	 * 
	 * @param obj  a target object
	 * @return  a parsed string
	 * 
	 * 
	 * @see String
	 */
	public default String castAndParse(Object obj)
	{
		return parse((O) obj);
	}
}